plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'jacoco'
    id "org.sonarqube" version "4.2.1.3168"
    id "org.flywaydb.flyway" version '8.0.0'
}

group = 'com.smartbyte'
version = '0.0.1-SNAPSHOT'

sonar {
    properties {
        property "sonar.projectKey", "I508859_edubookschedulerbackend_AYuV2indVuR86IZV8Em_"
        property "sonar.projectName", "EduBookSchedulerBackend"
        property "sonar.qualitygate.wait", true
    }
}

java {
    sourceCompatibility = '17'
}

    def applicationPropertiesFile = file('src/main/resources/application.properties')

if (applicationPropertiesFile.exists()) {
    def properties = new Properties()
    applicationPropertiesFile.withInputStream { inputStream ->
        properties.load(inputStream)
    }

    // Configure Flyway
    flyway {
        url = properties.getProperty('spring.datasource.url')
        driver = 'com.mysql.cj.jdbc.Driver'
        user = properties.getProperty('spring.datasource.username')
        password = properties.getProperty('spring.datasource.password')
    }
} else {
    throw new GradleException("application.properties file not found!")
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'mysql:mysql-connector-java:8.0.23'
    implementation 'org.flywaydb:flyway-mysql:8.4.4'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    //runtimeOnly 'com.h2database:h2'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required =true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/configuration/*"
            ])
        }))
    }
}
